MySql command types
1 DDL(DATA DEFINATION LANGUAGE)
how to open my sql console
mysql -u root -p (use for open mysql command)
password ******



show databases;(use for show databases)
*create

#how to create databases
>create database name;

>use name(for select databases)

>show tables;(to see table)

>create table emp(id int,name varchar(20),age int,city varchar(30));

>desc emp(use for see table structure)

#how to insert data in table
insert into emp values(11,"Rohit kumar",23,"Noida")
#how to show see table item

DQL(data quary language)
select * from emp; 

#how to insert data in specific column
insert into emp(name,age) values("bipin",25);

#how to update data
update emp set id=55,city="noida" where name="bipin";

# how to delete specific row
delete from emp where id=11

*truncate
truncate table emp;()  

*drop
drop table emp;delete table structure


#alter
> add
> drop
> rename
> change
> modify

# how to add column in existing table
 alter table emp add state varchar(30);(by default last)
 alter table emp add salary int after age; 
 alter table emp add sno int first;(at first)



#drop(use for drop column)
 alter table emp drop sno;


# how to change column name
alter table emp change state town varchar(20)


#modify
alter table emp modify city varchar(20) after id;



#rename(use for change table name)
 alter table emp rename emp2;


MYSQL Operators:-
1.Retrieving Records using comparison Operator
=,>,>=,<,<=,!=
2.Logical operator:=
and, or
3.like and not like operators:-
[pattern Matching]
Wild cards:-[%[zero or multiple characters]
_[only single character]]
4.in and not in operators
[list matching]
5.between and not between operators:-
"use for range matching"
06.retrieving records using is null and is not null operator:
7.order by operators:-[use for sorting 
asc:use for sorting ascending order
desc: use for sorting records in descending order]
8. limit operator:



create table emp(id int, name varchar(20),age int, salary float, city varchar(20),satate varchar(20))



1. comparison operator

select * from emp where name="uttam";
select * from emp where name!="uttam";
select * from emp where age>=20;
select * from emp where age!=20;
select * from emp where age <=20;



2 . logical operator

select * from emp where name="uttam" and age=20;
select * from emp where name="uttam" or age=20;


3. like and not like

select * from emp where name like'%j';#all charactor before j lie or not lie
select * from emp where name like'_a%';#"only second latter is a"
select * from emp where name not like'_a%';#"only second latter is a"


4. in not in 

select *from emp where city in("noida","delhi","patna")
select *from emp where city not in("noida","delhi","patna")


5.  between and not between

select *from emp where age between 20 and 25;
select *from emp where age not between 20 and 25;



6.null and not null
select * from emp where name is null
select * from emp where name is not null

7.order by operator

select * from emp order by name;
select * from emp order by name desc;


8. limit operator
select * from emp limit 3;
select * from emp limit 4,2;
 
 


Mysql Aggregate Function:
avg(),min(),max(),count(),sum()

#avg()
select avg(salary) from emp;
select avg(salary) as average from emp;

#sum()
select sum(salary) from emp;

#min()
select min(salary) from emp;

#max()
select max(salary) from emp;

#count()
select count(*) from emp;
select count('name') from emp;


MySql data and time function

curdate()
curtime()
now()
datediff()

select curdate();
select curtime();
select now();
 
create table emp2(id int,name varchar(20),date date,time time);
insert into emp2 values(11,"aman",curdate(),curtime());
insert into emp2 values(12,"sonu",curdate(),curtime());
insert into emp2 values(13,"monu",curdate(),curtime());

alter table emp2 add dt datetime;
inset into emp2 values(44,"saroj",now())


datedifrance
select datediff('2023-01-01','1998-01-01')



MY sql string function:-
upper(column_name)
lower(column_name)
mid(column_name)
length(column_name)
concate(column_name)
reverse(column_name)


#upper(column_name)



select upper(name) from emp;
select id,upper(name) as name,
age,salary,upper(city) as city,
upper (state) as state from emp;


#lower(column_name)
select lower(name) from emp;

#mid(column_name)
select mid(city,1,3) from emp


#length(column_name)
select lenght(city) as lenght from emp

#concat(column_name)
select concat(city,' ',state) from emp;

#reverse(column_name)
select reverse(city) as reverse from emp

--------sub query-----------
quary within quary is known as sub quary

mysql> select * from emp where salary=(select max(salary) from emp);

mysql> select * from emp where salary=(select max(salary) from emp where salary<(select max(salary)from emp));

mysql> select * from emp where salary= (select max(salary) from emp where salary<(select max(salary) from emp where salary<(select max(salary) from emp)));


---without sub quary----

mysql> select * from emp order by salary desc limit 2,1;




------------ADVANCE ---------------------
MYSQL CONSTRAINTS:-
1. not null
2. primary key
3. unique key
4. check 
5. default
6. conposite key
7. foreign key
8. auto_increment


KEY IN MYSQL

1 .SUPER KEY
2.CONDIDATE KEY
3.PRIMARY KEY
4.ALTERNATE KEY
5.UNIQUE KEY
6.FOREIGN KEY
7.COMPOSITE KEY

create a table emp id auto-increment,name not null,age>18,address default'noida'



 
create table emp(id int not null auto_increment,
    -> name varchar(20) not null, age int,
    -> salary int ,city varchar(20) default 'noida',
    -> check (salary>15000),primary key(id));




unique key

 create table emp1(id int unique,name varchar(20),salary int,mob bigint unique);


composite key
create table emp2(id int not null,name varchar(20),dep varchar(20),primary key(id,name,dep));



#table 1


create table customers(cid int not null auto_increment primary key,cname varchar(20) not null,
caddress varchar(20) default 'noida',mob bigint);



#table 2


 create table orders(pid int not null primary key,
 pname varchar(20) not null,qty int,price float,cid int,
 foreign key(cid) references customers(cid));




How to delete constraints:-

# how to delete primary key
alter table emp drop primary key;

# how to delete not null
alter table emp modify name varcahr(20) null;

# how to delete unique key
alter table emp drop index id;


#how to default 
alter table emp alter drop column_name default


# how to drop check  
alter table emp drop constraint emp_chk_1;

#how to drop auto_increment

alter table emp drop primary key , change id id int;

# how to drop composite key

alter table emp drop primary key;

#how to delete foreign key

alter table orders foreign key orders_ibfk_1;



---------------window function--------

select row_number() over() from emp;

select *,row_number()  over() as rn from emp;

select *,row_number()  over(order by salary) as rn from emp;

select *,rank()  over(order by salary) as rn from emp;0

select *,dense_rank()  over(order by salary) as rn from emp;

select *,dense_rank()  over(partition by dsg order by salary) as rn from emp;

select *,lead(salary)  over() as rn from emp;

select *,lead(salary,2)  over() as rn from emp;

select *,lead(salary,2,0)  over() as rn from emp;

select *,lag(salary,2,0)  over() as rn from emp;




join in mysql


Joins in Mysql Database:-7 types
1.Cross Join
2.Natural Join
3.Self Join
4.Inner Join
5.Outer Join :- three type
1.Left join/ Left outer join
2.Right join/right outer join
3.full join/ full outer join #mysql does not full join

-----+

 
#unsigned
#zerofill
#generated

create table product1(id int,name varchar(20),qty int,
price int,amount int generated always as (qty*price));



inner join

#select * from customer inner join orders on customer.cid=orders.cid;

# select * from customer, orders where customer.cid=orders.cid;

#select c.cid,c.cname,o.pname,o.qty,o.price from customer c,orders o where c.cid=o.cid;

#select c.cid,c.cname,o.pid,o.pname,o.qty,o.price from customers c inner join,orders o on c.cid=o.pid;
 v 


left join

select c.cid,c.cname,o.pid,o.pname,o.qty,o.price from customers c left join
orders o on c.cid=o.pid;




right join

select c.cid,c.cname,o.pid,o.pname,o.qty,o.price from customers c right join
orders o on c.cid=o.pid;

#natural join

select * from student natural join marks;

#cross join:-

select * from emp cross join dep;
select name dep from emp cross join dep;
select * from emp,dep;

#self join:-
table
create table categories(cat_id int, cat_name varchar(20),parent_id int);

1.
select * from categories c1,categories c2 where c1.cat_id=c2.parent_id;
  
2.
select c1.cat_id,c1.cat_name,c2.cat_id as subcat_id,
    -> c2.cat_name as subcat_name from categories c1 inner join
    -> categories c2 on c1.cat_id=c2.parent_id;





Types of sql clauses;
*select
*from
1.where clause(work on whole table)
2.group by clause(work on repeted values)
3.having clause
4.order by clause



2.group by
select dept_id,count(*) from employee group by dept_id;

select dept_id,count(*) from employee group by dept_id order by count(*);

select dept_id,sum(salary) from employee group by dept_id;

select dept_id,address,count(*) from employee group by dept_id,address;
  
3. having clause
* Having clause is used with group by clause and filter the groups created by
the group by clause 
* having clause enables you to specify condition that filter which group results
appear in the results.


>select dept_id,count(*) from employee group by dept_id having count(*)>2;

>select dept_id,sum(salary) from employee group by dept_id having sum(salary)>5000;




Set Operator in Mysql:-column data type and data should be same
1.Union 
2.Union all
3.Intersect
4.Except







1.Union

select * from book
union
select * from movies


2 Union all

select * from book
union all
select * from movies


3 insect
select * from book
intersect
select * from movies


4 except

select * from book
except
select * from movies





TCL:- [Transaction control language]

savepoint
rollback
commit
set autotransaction

>
start transaction;
savepoint a;
delete from emp where id=1;
savepoint b;
update emp set salary=salary+3000;
savepoint c;
delete from emp where salary>50000;

rollback to c;
select * from emp;
rollback to b;
select * from emp;
rollback to a;
select * from emp;
commit;


MY SQL ADVANCE:-
1.stored Procedure
2.stored fuction
3.Trigger
4.Views

1.stored procedure:-
>>A precedure is a collection of pre-complield
SQL statements stored inside the database.

>> stored procedures are created to perform
one or more DML operations on Database.

SYNTAX

DELIMITER (TERMINATOR)

CREATE PROCEDURE name ([IN|OUT|INOUT]parameter_name datatype)

BEGIN
	Declaration_section
	Executable_section
END 




not parameterize

 create procedure get_emp()
    -> begin
    -> insert into emp values(10,"rakesh",26,"patna",45000,101);
    -> select * from emp;
    -> end
    -> &&

call get_emp()


#how to see store porcedure in mysql
>show procedure status where db='database name';
#how to definition of stored procedue in mysql
>show create procedure get_customer;
#how to delete stored procedure in mysql:-
>drop procedure get_customer;



with parameter

IN parameter

create table student(rallno int,name varchar(20),marks int,status varchar(20))

delimiter ##
create procedure update6(in mark1 int)
       begin
       declare mymark int;
       set mymark=mark1;
       if mymark>35 then
       update emp set status="pass" where marks>=mymark;
       else
       update emp set status="fail" where marks<mymark;
       end if;
       end;
       ##

example

 delimiter ##
mysql> create procedure get_data(in val int)
    -> begin
    -> select * from student limit val;
    -> end ##


# out paramiter

 create procedure get_max_marks(out max_marks int)
    begin
    select max(marks) into max_marks from students;
    end
    #


call get_max_marks(@data)
select @data



create procedure insert_data(in r int,n varchar(20),m int,s varchar(20))
    -> begin
    -> insert into students values(r,n,m,s);
    -> end
    -> $

Store Function

> A store function in MYSQL  is a set of SQL 
statment that perform some task/operation and
return a single values.

. The function must return a value but in 
Stored procedue it is optional. Even a procedure
can return zero or n values.
.function can have only input parameters for it 
whereas procedure can have input or output parameters.
. function can be called from procedure whereas
procedures cannot be called from a function.


syntax

delimiter $
create function fun_name(fun_parameter(s))
returns datatype
[NOT]{Characteristics}"deterministic"
fun_body;


create function student_status1(marks int)
     returns varchar(20)
     deterministic
     begin
     declare student_status varchar(20);
     if marks > 60 then
     set student_status = 'first';
     elseif (marks <=60 and marks>=45 ) then
     set student_status='second';
     elseif marks < 45 then
     set student_status ='fail';
     end if;
     return (student_status);
     end
     #
select name ,student_status(marks) as status from student;
  


# Trigger:-it call automatically


create trigger trigger_name trigger_time trigger_event
on table_name for each row
begin
	variable declarations
	trigger code
end;


exemple:-

create trigger befor_insert_emp
     before insert on emp
     for each row
     begin
     if new.salary<0 then set new.salary=0;
     end if;
     end;
     #
MySQL View :-

A view is a database object that has no values. Its contents 
are based on the base table. It contains rows and columns 
similar to the real table. In MySQL, the View is a virtual 
table created by a query by joining one or more tables. 

It is operated similarly to the base table but does not 
contain any data of its own. The View and table have one 
main difference that the views are definitions built on top 
of other tables . If any changes occur in the underlying table,
the same changes reflected in the View also.

MySQL allows us to create a view using Command Line:-

Syntax:-

Following is the syntax to create a view in MySQL:

CREATE  OR REPLACE VIEW view_name AS    
SELECT columns    
FROM tables  [WHERE conditions];    

create view emp1 as select id,name,age from emp;

CREATE OR REPLACE view emp4 as select id,name from emp;

show tables;

show full tables;

show full tables where table_type like 'VIEW';

drop view table_name;

















