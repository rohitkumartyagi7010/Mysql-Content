-- Here are the ALTER commands for adding, dropping, renaming, changing, and modifying columns in your existing tables:
drop DATABASE if EXISTS alter_database;
CREATE database alter_database;
use alter_database;


CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15),
    address VARCHAR(255),
    city VARCHAR(50),
    state VARCHAR(50),
    zip_code VARCHAR(10),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL CHECK (total_amount > 0),
    status VARCHAR(50) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
INSERT INTO customers (first_name, last_name, email, phone, address, city, state, zip_code)
VALUES
('Arjun', 'Sharma', 'arjun.sharma@example.com', '9876543210', '123 MG Road', 'Mumbai', 'Maharashtra', '400001'),
('Rohit', 'Verma', 'rohit.verma@example.com', '9876543211', '456 Park Street', 'Delhi', 'Delhi', '110001'),
('Priya', 'Singh', 'priya.singh@example.com', '9876543212', '789 Main Road', 'Bangalore', 'Karnataka', '560001'),
('Anjali', 'Rao', 'anjali.rao@example.com', '9876543213', '101 Lake View', 'Hyderabad', 'Telangana', '500001'),
('Vikram', 'Patel', 'vikram.patel@example.com', '9876543214', '202 High Street', 'Ahmedabad', 'Gujarat', '380001');

INSERT INTO orders (customer_id, order_date, total_amount, status)
VALUES
(1, '2024-07-01', 1500.00, 'Pending'),
(2, '2024-07-02', 2500.00, 'Shipped'),
(3, '2024-07-03', 3500.00, 'Delivered'),
(4, '2024-07-04', 4500.00, 'Cancelled'),
(5, '2024-07-05', 5500.00, 'Pending');





use alter_database;
select * from customers;
select * from orders;

-- Adding a Column to a Table
ALTER TABLE customers ADD COLUMN middle_name VARCHAR(50);

-- Adding Adding a Column at a Specific Location
-- Let's assume you want to add a column middle_name after the first_name column in the customers table.

ALTER TABLE customers ADD COLUMN middle_name VARCHAR(50) AFTER first_name;

DESCRIBE customers;


-- Adding a Column at first index 
ALTER TABLE customers ADD COLUMN EMP_Rank INT FIRST;


-- Dropping a Column from a Table
ALTER TABLE customers DROP COLUMN middle_name;


-- Renaming a Column in a Table
ALTER TABLE customers CHANGE COLUMN phone contact_number VARCHAR(15);

-- Modifying a Column in a Table
-- Modify the email column to allow NULL values in customers table:
ALTER TABLE customers MODIFY COLUMN email VARCHAR(100) NULL;


-- Renaming a Table
-- Rename customers table to clients:

RENAME TABLE customers TO clients;
-- Dropping a Table
-- Drop the orders table:
DROP TABLE orders;

-- Truncating a Table
-- Truncate the clients table:
TRUNCATE TABLE clients;

-- Dropping a Database
-- Drop the alter_database database:

DROP DATABASE alter_database;

-- Dropping a Primary Key
-- Drop the primary key from clients table:

ALTER TABLE clients DROP PRIMARY KEY;

-- Creating a Primary Key
-- Add a primary key to clients table:

ALTER TABLE clients ADD PRIMARY KEY (customer_id);


-- Dropping a Foreign Key
-- Drop the foreign key from orders table:

ALTER TABLE orders DROP FOREIGN KEY orders_ibfk_1;  
-- replace `orders_ibfk_1` with the actual constraint name
-- The orders_ibfk_1 in the statement ALTER TABLE orders DROP FOREIGN KEY orders_ibfk_1; represents the name of the foreign key constraint that you want to drop.
-- This name is automatically generated by MySQL when you create a foreign key constraint,
-- unless you explicitly specify a name for it.
-- Here's a breakdown of the components:

-- orders: The name of the table.
-- ibfk: Indicates that this is an InnoDB foreign key.
-- _1: A sequential number assigned to the foreign key constraint, starting from 1.
-- These names are automatically generated unless you specify a name for the foreign key constraint when you create it.
-- If you need to drop a foreign key constraint and you haven't explicitly named it, you can use the SHOW CREATE TABLE statement to find the automatically generated name.


-- Find the foreign key constraint name:

SHOW CREATE TABLE orders;
-- The output might look like this:

-- CREATE TABLE `orders` (
--   `order_id` int(11) NOT NULL AUTO_INCREMENT,
--   `customer_id` int(11) NOT NULL,
--   `order_date` date NOT NULL,
--   `total_amount` decimal(10,2) NOT NULL CHECK (total_amount > 0),
--   `status` varchar(50) NOT NULL,
--   PRIMARY KEY (`order_id`),
--   KEY `customer_id` (`customer_id`),
--   CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`customer_id`) REFERENCES `customers` (`customer_id`)
-- ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- if you have not explictily mentiond the name of forigen key 
-- You can Drop the foreign key constraint as below:
ALTER TABLE orders DROP FOREIGN KEY orders_ibfk_1;

-- Specifying a Foreign Key Constraint Name
-- When creating a foreign key, you can specify a custom name for the constraint to avoid using the default naming convention:

ALTER TABLE orders ADD CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES customers(customer_id);

-- or you can do it while creating a table

CREATE DATABASE alter_database;
USE alter_database;

CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15),
    address VARCHAR(255),
    city VARCHAR(50),
    state VARCHAR(50),
    zip_code VARCHAR(10),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL CHECK (total_amount > 0),
    status VARCHAR(50) NOT NULL,
    CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- now you will need to drop as below
-- Drop the foreign key constraint
ALTER TABLE orders DROP FOREIGN KEY fk_customer;


-- 1. Update Operations
-- Update Phone Number for a Specific Customer
-- To update the phone number for the customer with customer_id 1:

UPDATE customers
SET phone = '1112223333'
WHERE customer_id = 1;

-- Update Email for Multiple Customers
-- To update the email addresses for customers living in Mumbai:

UPDATE customers
SET email = 'updated.email.mumbai@example.com'
WHERE city = 'Mumbai';

-- Add a Middle Name Column and Update Its Values
-- First, add the middle_name column:

ALTER TABLE customers ADD COLUMN middle_name VARCHAR(50);

-- Then, update the middle_name for each customers. 

UPDATE customers
SET middle_name = CASE
    WHEN customer_id = 1 THEN 'Raj'
    WHEN customer_id = 2 THEN 'Kumar'
    WHEN customer_id = 3 THEN 'Meera'
    WHEN customer_id = 4 THEN 'Lakshmi'
    WHEN customer_id = 5 THEN 'Ravi'
END;


-- Delete Operations

-- Delete a Specific Customer
-- To delete the customer with customer_id 2:

DELETE FROM customers
WHERE customer_id = 2;

-- Delete Customers from a Specific City
-- To delete all customers living in Bangalore:

DELETE FROM customers
WHERE city = 'Bangalore';

-- Delete All Customers
-- To delete all records from the customers table:

DELETE FROM customers;









