Drop database if exists DDL_Commands;
create DATABASE DDL_Commands;
use  DDL_Commands;

CREATE TABLE my_table(
id INT,
name VARCHAR(100) Not NULL,
age int NOT NULL,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO my_table (id, name, age) VALUES 
(1, 'Rohitit', 25),
(2, 'Sachin', 35),
(3, 'Vikas', 28);

-- Create my_table2
-- Create my_table2
CREATE TABLE my_table2 (
    id INT,
    description VARCHAR(255) NOT NULL
);

-- Insert data into my_table2
INSERT INTO my_table2 (id, description) VALUES 
(1, 'Item 1'),
(2, 'Item 2'),
(3, 'Item 3');



desc my_table;

-- Add a new column
ALTER TABLE my_table ADD COLUMN email VARCHAR(100);

-- add column after any column
ALTER TABLE customers ADD COLUMN middle_name VARCHAR(50) AFTER first_name;


-- Adding a Column at first index 
ALTER TABLE my_table ADD COLUMN EMP_Rank INT FIRST;

-- Modify an existing column
ALTER TABLE my_table MODIFY COLUMN name VARCHAR(150) NOT NULL;

-- Change a column name and type
ALTER TABLE my_table CHANGE COLUMN email email_address VARCHAR(200);

-- Drop a column
ALTER TABLE my_table DROP COLUMN age;

-- Add a primary key (if not already defined)
ALTER TABLE my_table ADD PRIMARY KEY (id);

-- Add a foreign key
-- Assuming there is another table my_table2 with a column id:


-- Add foreign key constraint to my_table2
ALTER TABLE my_table2 ADD CONSTRAINT fk_id FOREIGN KEY (id) REFERENCES my_table(id);
-- MUL indicates that the column is part of an index that allows for multiple occurrences of the same value

-- see all index (fk_key and pr_key and all)
-- we will discuss all indexs in indexing topic
SHOW INDEX FROM my_table2;
SHOW INDEX FROM my_table;

-- drop forign key
ALTER TABLE my_table2 DROP FOREIGN KEY fk_id; -- (it might show fk_id but when you run it once again it will show does not exist)


-- Drop primary key
-- Important Notes:
-- You cannot drop the primary key if it is referenced by a foreign key constraint. In that case, you must first drop the foreign key.
-- Ensure that the column(s) you want to use as the new primary key have unique values, as primary keys must be unique.

ALTER TABLE my_table DROP PRIMARY KEY;

-- RENAME TABLE
RENAME TABLE my_table TO my_new_table;

-- Rename database 
-- MySQL does not have a direct RENAME DATABASE command. However, you can effectively rename a database by following these steps:
-- CREATE DATABASE new_database_name;
-- RENAME TABLE old_database_name.table_name TO new_database_name.table_name;  -- (need to do for all tables)
-- DROP DATABASE old_database_name;

-- Drop database

DROP DATABASE ddl_commands;




-- ADD on



CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15),
    address VARCHAR(255),
    city VARCHAR(50),
    state VARCHAR(50),
    zip_code VARCHAR(10),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL CHECK (total_amount > 0),
    status VARCHAR(50) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
INSERT INTO customers (first_name, last_name, email, phone, address, city, state, zip_code)
VALUES
('Arjun', 'Sharma', 'arjun.sharma@example.com', '9876543210', '123 MG Road', 'Mumbai', 'Maharashtra', '400001'),
('Rohit', 'Verma', 'rohit.verma@example.com', '9876543211', '456 Park Street', 'Delhi', 'Delhi', '110001'),
('Priya', 'Singh', 'priya.singh@example.com', '9876543212', '789 Main Road', 'Bangalore', 'Karnataka', '560001'),
('Anjali', 'Rao', 'anjali.rao@example.com', '9876543213', '101 Lake View', 'Hyderabad', 'Telangana', '500001'),
('Vikram', 'Patel', 'vikram.patel@example.com', '9876543214', '202 High Street', 'Ahmedabad', 'Gujarat', '380001');

INSERT INTO orders (customer_id, order_date, total_amount, status)
VALUES
(1, '2024-07-01', 1500.00, 'Pending'),
(2, '2024-07-02', 2500.00, 'Shipped'),
(3, '2024-07-03', 3500.00, 'Delivered'),
(4, '2024-07-04', 4500.00, 'Cancelled'),
(5, '2024-07-05', 5500.00, 'Pending');



ALTER TABLE orders DROP FOREIGN KEY orders_ibfk_1;  
-- replace `orders_ibfk_1` with the actual constraint name
-- The orders_ibfk_1 in the statement ALTER TABLE orders DROP FOREIGN KEY orders_ibfk_1; represents the name of the foreign key constraint that you want to drop.
-- This name is automatically generated by MySQL when you create a foreign key constraint,
-- unless you explicitly specify a name for it.
-- Here's a breakdown of the components:

-- orders: The name of the table.
-- ibfk: Indicates that this is an InnoDB foreign key.
-- _1: A sequential number assigned to the foreign key constraint, starting from 1.
-- These names are automatically generated unless you specify a name for the foreign key constraint when you create it.
-- If you need to drop a foreign key constraint and you haven't explicitly named it, you can use the SHOW CREATE TABLE statement to find the automatically generated name.


-- Find the foreign key constraint name:

SHOW CREATE TABLE orders;
-- The output might look like this:

-- CREATE TABLE `orders` (
--   `order_id` int(11) NOT NULL AUTO_INCREMENT,
--   `customer_id` int(11) NOT NULL,
--   `order_date` date NOT NULL,
--   `total_amount` decimal(10,2) NOT NULL CHECK (total_amount > 0),
--   `status` varchar(50) NOT NULL,
--   PRIMARY KEY (`order_id`),
--   KEY `customer_id` (`customer_id`),
--   CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`customer_id`) REFERENCES `customers` (`customer_id`)
-- ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- if you have not explictily mentiond the name of forigen key 
-- You can Drop the foreign key constraint as below:


ALTER TABLE orders DROP FOREIGN KEY orders_ibfk_1;

-- Specifying a Foreign Key Constraint Name
-- When creating a foreign key, you can specify a custom name for the constraint to avoid using the default naming convention:

ALTER TABLE orders ADD CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES customers(customer_id);

-- or you can do it while creating a table


CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15),
    address VARCHAR(255),
    city VARCHAR(50),
    state VARCHAR(50),
    zip_code VARCHAR(10),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL CHECK (total_amount > 0),
    status VARCHAR(50) NOT NULL,
    CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- now you will need to drop as below
-- Drop the foreign key constraint
ALTER TABLE orders DROP FOREIGN KEY fk_customer;









